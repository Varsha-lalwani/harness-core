Var index = 0
Var one = 1
Var nullObj = null
Var totalMetrics = Env:metricNames.length()
Var timeSeriesList = []

while Var:index != Var:totalMetrics {

    Var metricNameStr = Env:metricNames[Var:index]
    Var metricIdentifierStr = Env:metricIdentifiers[Var:index]
    Var urlPath = Env:urlPaths[Var:index]
    Var dataCollectionURL = concat(Env:baseUrl, Var:urlPath)
    Var startTimePlaceholder = Env:startTimePlaceholders[Var:index]
    Var endTimePlaceholder = Env:endTimePlaceholders[Var:index]
    Var startTimeFormat = Env:startTimeFormats[Var:index]
    Var endTimeFormat = Env:endTimeFormats[Var:index]
    Var metricValueJSONPath = Env:metricValueJSONPaths[Var:index]
    Var timestampValueJSONPath = Env:timestampValueJSONPaths[Var:index]
    Var serviceInstanceJSONPath = Env:serviceInstanceJSONPaths[Var:index]
    Var body = Env:bodies[Var:index]
    Var innerIndex = 0

    Var serviceInstanceListJsonPath = Env:serviceInstanceListJsonPaths[Var:index]
    Var relativeServiceInstanceValueJsonPath = Env:relativeServiceInstanceValueJsonPaths[Var:index]
    Var relativeMetricListJsonPath = Env:relativeMetricListJsonPaths[Var:index]
    Var relativeMetricValueJsonPath = Env:relativeMetricValueJsonPaths[Var:index]
    Var relativeTimestampJsonPath = Env:relativeTimestampJsonPaths[Var:index]


    if Var:startTimeFormat == "MILLISECONDS" {
       Var startTimeStr = concat("", Env:startTimeMillis)
       Var:dataCollectionURL.replaceAll(Var:startTimePlaceholder, Var:startTimeStr)
    }

    if Var:startTimeFormat == "SECONDS" {
       Var startTimeStr = concat("", Env:startTimeSeconds)
       Var:dataCollectionURL.replaceAll(Var:startTimePlaceholder, Var:startTimeStr)
    }

    if Var:endTimeFormat == "MILLISECONDS" {
       Var endTimeStr = concat("", Env:endTimeMillis)
       Var:dataCollectionURL.replaceAll(Var:endTimePlaceholder, Var:endTimeStr)
    }

    if Var:endTimeFormat == "SECONDS" {
       Var endTimeStr = concat("", Env:endTimeSeconds)
       Var:dataCollectionURL.replaceAll(Var:endTimePlaceholder, Var:endTimeStr)
    }

    Request request = new Request(url=Var:dataCollectionURL, header=Env:commonHeaders, options=Env:commonOptions, body=Var:body)
    print Var:request
    Var response = sync-call(Var:request)

    Var allServiceInstances = extract(Var:response,Var:serviceInstanceListJsonPath)
    Var currentInstanceIndex = 0
    Var totalInstances = Var:allServiceInstances.length()
    while Var:currentInstanceIndex != Var:totalInstances {
      Var currentInstance = Var:allServiceInstances[Var:currentInstanceIndex]
      Var metrics = extract(Var:currentInstance,Var:relativeMetricListJsonPath)
      Var serviceInstanceValue = extract(Var:currentInstance,Var:relativeServiceInstanceValueJsonPath)
      Var metricsIndex = 0
      Var totalInstanceMetrics = Var:metrics.length()
      while Var:metricsIndex != Var:totalInstanceMetrics {
         Var currentMetricObj = Var:metrics[Var:metricsIndex]
         Var metricVal = extract(Var:currentMetricObj,Var:relativeMetricValueJsonPath)
         Var timestamp = extract(Var:currentMetricObj,Var:relativeTimestampJsonPath)
         Var tsRecord = new TimeseriesRecord(txnName=Env:groupName, metricIdentifier=Var:metricIdentifierStr, metricName=Var:metricNameStr, metricValue=Var:metricVal, timestamp=Var:timestamp, host=Var:serviceInstanceValue)
         Var:timeSeriesList.append(Var:tsRecord)
         metricsIndex = Var:metricsIndex + Var:one
      }

      currentInstanceIndex = Var:currentInstanceIndex + Var:one
    }

    index = Var:index + Var:one
}

return Var:timeSeriesList